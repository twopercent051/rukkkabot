from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import get_start_link
from aiogram.utils.markdown import hcode
from aiogram.dispatcher import FSMContext
from aiogram_calendar import simple_cal_callback, SimpleCalendar

import aiogram_calendar
from datetime import datetime, timedelta

from tgbot.keyboards.reply import *
from tgbot.keyboards.inline import *
from tgbot.misc.states import FSMUser
from tgbot.models.sql_connector import *
from create_bot import bot


async def user_start(message: Message):
    if message.text == '–ù–∞–∑–∞–¥':
        args = ''
    else:
        args = message.get_args()
    if args == '':
        text = '–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è'
        kb = main_menu_kb()
    else:
        pass
    await message.delete()
    await FSMUser.home.set()
    await message.answer(text, reply_markup=kb)


async def main_menu(message: Message):
    if message.text == '–°–æ–æ–±—â–µ–Ω–∏–µ':
        text = [
            '–ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ –≥–¥–µ –≤–∞—Å –∏—Å–∫–∞—Ç—å –∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å –≤–∞–º–∏\n',
            '–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º'
        ]
        kb = back_kb()
        await FSMUser.message.set()
    elif message.text == '–ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞':
        user_id = message.from_user.id
        rec_list = await get_recipients_sql(user_id)
        if len(rec_list) == 0:
            text = ['–ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞']
            kb = recipient_kb()
        else:
            pass
    elif message.text == '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏'
        kb = date_kb()
    elif message.text == 'üéÅ –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å':
        text = [
            '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ https://yoomoney.ru/fundraise/AMJIwwIzSc4.230219\n',
            '–°–ø–∞—Å–∏–±–æ! üíî'
        ]
        kb = back_kb()
    else:
        text = ['–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞']
        kb = back_kb()
    await message.delete()
    await message.answer('\n'.join(text), reply_markup=kb)


async def get_message(message: Message):
    user_id = message.from_user.id
    new_text = message.text
    text = '–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è'
    kb = main_menu_kb()
    msg_sql = await get_message_sql(user_id)
    if len(msg_sql) == 0:
        await create_message_sql(user_id, 'message', new_text)
    else:
        await update_message_sql(user_id, 'message', new_text)
    await message.answer(text, reply_markup=kb)


async def add_user(message: Message):
    user_id = message.from_user.id
    link = await get_start_link(user_id, encode=True)
    text = [
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–∫–∏–Ω—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ',
        f'{hcode(link)}\n',
        '–ù–µ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n',
        '–û–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑—É—é—Ç—Å—è'
    ]
    kb = back_kb()
    await message.answer('\n'.join(text), reply_markup=kb)


async def get_date(callback: CallbackQuery, state: FSMContext):
    if callback.data.split(':')[1] == 'today':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º'
        kb = back_kb()
        async with state.proxy() as data:
            data['date'] = datetime.today()
    elif callback.data.split(':')[1] == 'tomorrow':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º'
        kb = back_kb()
        async with state.proxy() as data:
            data['date'] = datetime.today() + timedelta(days=1)
    else:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'
        kb = await aiogram_calendar.SimpleCalendar().start_calendar()
        await callback.message.answer('\n'.join(text), reply_markup=kb)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)



def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(user_start, lambda c: c.text == '–ù–∞–∑–∞–¥', state='*')
    dp.register_message_handler(main_menu, content_types='text', state=FSMUser.home)
    dp.register_message_handler(get_message, content_types='text', state=FSMUser.message)
    dp.register_message_handler(user_start, lambda c: c.text == '–ù–∞–∑–∞–¥', state='*')
    dp.register_message_handler(add_user, lambda c: c.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state='*')


